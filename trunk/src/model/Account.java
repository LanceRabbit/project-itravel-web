package model;

// Generated 2014/9/2 �U�� 08:47:27 by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.OrderBy;
import org.hibernate.annotations.Parameter;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "ACCOUNT", schema = "dbo", catalog = "iiiTravel")
public class Account implements java.io.Serializable {

	private String accountId;
	private String email;
	private byte[] password;
	private String nickname;
	private Integer accountLevel;
	private Date lastLogonDt;
	private byte[] image;
	private Integer blacklistLevel;
	private Set<Trip> trips = new HashSet<Trip>(0);
	private Set<SpotDetail> spotDetails = new HashSet<SpotDetail>(0);
	private Set<SpotCommentRecord> spotCommentRecords = new HashSet<SpotCommentRecord>(
			0);
	private Set<SpotDetail> spotLike = new HashSet<SpotDetail>(0);
	private SpotOwner spotOwner;
	private Set<Trip> tripCollect = new HashSet<Trip>(0);
	private Set<Trip> tripLike = new HashSet<Trip>(0);
	private Set<Trip> trips_3 = new HashSet<Trip>(0);
	private Set<SpotDetail> spotCollect = new HashSet<SpotDetail>(0);

	public Account() {
	}
	
	@Override
	public String toString() {
		return "AccountId:"+accountId+"; Email:"+email+"; Password:"+password+"; Nickname:"+nickname+"AccountLevel:"+accountLevel+"; LastLoginDate:"+lastLogonDt+"; BlacklistLevel:"+blacklistLevel;
	}

	public Account(String email, byte[] password, String nickname) {
		this.email = email;
		this.password = password;
		this.nickname = nickname;
	}

	public Account(String email, byte[] password, String nickname,
			Integer accountLevel, Date lastLogonDt, byte[] image,
			Integer blacklistLevel, Set<Trip> trips,
			Set<SpotDetail> spotDetails,
			Set<SpotCommentRecord> spotCommentRecords,
			Set<SpotDetail> spotLike, SpotOwner spotOwner,
			Set<Trip> tripCollect, Set<Trip> tripLike, Set<Trip> trips_3,
			Set<SpotDetail> spotCollect) {
		this.email = email;
		this.password = password;
		this.nickname = nickname;
		this.accountLevel = accountLevel;
		this.lastLogonDt = lastLogonDt;
		this.image = image;
		this.blacklistLevel = blacklistLevel;
		this.trips = trips;
		this.spotDetails = spotDetails;
		this.spotCommentRecords = spotCommentRecords;
		this.spotLike = spotLike;
		this.spotOwner = spotOwner;
		this.tripCollect = tripCollect;
		this.tripLike = tripLike;
		this.trips_3 = trips_3;
		this.spotCollect = spotCollect;
	}

	@GenericGenerator(name = "generator", strategy = "select", parameters = @Parameter(name = "key", value = "email"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "ACCOUNT_ID", nullable = false, length = 9)
	public String getAccountId() {
		return this.accountId;
	}

	public void setAccountId(String accountId) {
		this.accountId = accountId;
	}

	@Column(name = "EMAIL", unique = true, nullable = false, length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "PASSWORD", nullable = false, length = 11)
	public byte[] getPassword() {
		return this.password;
	}

	public void setPassword(byte[] password) {
		this.password = password;
	}

	@Column(name = "NICKNAME", nullable = false, length = 10)
	public String getNickname() {
		return this.nickname;
	}

	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	@Column(name = "ACCOUNT_LEVEL")
	public Integer getAccountLevel() {
		return this.accountLevel;
	}

	public void setAccountLevel(Integer accountLevel) {
		this.accountLevel = accountLevel;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "LAST_LOGON_DT", length = 10)
	public Date getLastLogonDt() {
		return this.lastLogonDt;
	}

	public void setLastLogonDt(Date lastLogonDt) {
		this.lastLogonDt = lastLogonDt;
	}

	@Column(name = "IMAGE")
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "BLACKLIST_LEVEL")
	public Integer getBlacklistLevel() {
		return this.blacklistLevel;
	}

	public void setBlacklistLevel(Integer blacklistLevel) {
		this.blacklistLevel = blacklistLevel;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "account")
	@OrderBy(clause = "TRIP_ID DESC")
	public Set<Trip> getTrips() {
		return this.trips;
	}

	public void setTrips(Set<Trip> trips) {
		this.trips = trips;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "account")
	public Set<SpotDetail> getSpotDetails() {
		return this.spotDetails;
	}

	public void setSpotDetails(Set<SpotDetail> spotDetails) {
		this.spotDetails = spotDetails;
	}

	@OneToMany(fetch = FetchType.LAZY)
	@JoinColumn(name="ACCOUNT_ID")
	public Set<SpotCommentRecord> getSpotCommentRecords() {
		return this.spotCommentRecords;
	}

	public void setSpotCommentRecords(Set<SpotCommentRecord> spotCommentRecords) {
		this.spotCommentRecords = spotCommentRecords;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "SPOT_LIKE_RECORD", joinColumns = { @JoinColumn(name = "ACCOUNT_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "SPOT_ID", nullable = false, updatable = false) })
	public Set<SpotDetail> getSpotLike() {
		return this.spotLike;
	}

	public void setSpotLike(Set<SpotDetail> spotLike) {
		this.spotLike = spotLike;
	}

	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name="ACCOUNT_ID")
	public SpotOwner getSpotOwner() {
		return this.spotOwner;
	}

	public void setSpotOwner(SpotOwner spotOwner) {
		this.spotOwner = spotOwner;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "TRIP_COLLECT_RECORD", joinColumns = { @JoinColumn(name = "ACCOUNT_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "TRIP_ID", nullable = false, updatable = false) })
	public Set<Trip> getTripCollect() {
		return this.tripCollect;
	}

	public void setTripCollect(Set<Trip> tripCollect) {
		this.tripCollect = tripCollect;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "TRIP_LIKE_RECORD", joinColumns = { @JoinColumn(name = "ACCOUNT_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "TRIP_ID", nullable = false, updatable = false) })
	public Set<Trip> getTripLike() {
		return this.tripLike;
	}

	public void setTripLike(Set<Trip> tripLike) {
		this.tripLike = tripLike;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Trip> getTrips_3() {
		return this.trips_3;
	}

	public void setTrips_3(Set<Trip> trips_3) {
		this.trips_3 = trips_3;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "SPOT_COLLECT_RECORD", joinColumns = { @JoinColumn(name = "ACCOUNT_ID", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "SPOT_ID", nullable = false, updatable = false) })
	public Set<SpotDetail> getSpotCollect() {
		return this.spotCollect;
	}

	public void setSpotCollect(Set<SpotDetail> spotCollect) {
		this.spotCollect = spotCollect;
	}

}
